.TH GLIIM 2gg $VERSION $DATE Development Tools
.SH NAME
sub-handler \-  (service-processing)
.SH PURPOSE
Call another handler within the same process.

.SH SYNTAX

.RS 4
.EX

sub-handler <request path>

.EE
.RE

.SH DESCRIPTION
Calls another handler within the same request in the same process. You can call any handler within the same application.

<request path> is the \fBrequest\fP path served by the handler being called. It can be a string variable or a constant.

Use \fBset-param\fP and \fBget-param\fP to pass parameters between the caller and callee handlers.

sub-handler uses the same high-performance hash table used by a \fBrequest\fP to route requests by name.

.SH EXAMPLES
The following example demonstrate calling a sub-handler twice, and also using its output inline in the caller. An input parameter is passed to it, and an output obtained:

Copy to file "callsub.gliim":

.RS 4
.EX

%% /callsub
    //
    // First call to sub-handler
    //
    // Set input for sub-handler
    set-param inp = "some string"
    (( s
    sub-handler "/sub/service"
    ))
    // Get output from sub-handler
    get-param out type string
    @<<p-out s>> with output [<<p-out out>>]

    //
    // Second call to sub-handler
    //
    // Set input for sub-handler called as inline code
    set-param inp = "new string"
    (( s
    @Output: <<sub-handler "/sub/service">>
    ))
    // Get output from sub-handler
    get-param out type string
    @<<p-out s>> with output [<<p-out out>>]
%%

.EE
.RE

And in "sub__service.gliim" file:

.RS 4
.EX

%% /sub/service
    @This is sub!
    get-param inp
    (( out
    @got input: <<p-out inp>>
    ))
    set-param out = out
%%

.EE
.RE

Create and build an application:

.RS 4
.EX

sudo mgrg -i -u $(whoami) subhandler
gg -q

.EE
.RE

Run it:

.RS 4
.EX

gg -r --req="/callsub" --exec --silent-header

.EE
.RE

The output:

.RS 4
.EX

This is sub! with output [got input: some string]
Output: This is sub! with output [got input: new string]

.EE
.RE

.SH SEE ALSO
 
.B - Service processing

\fBafter-handler\fP  
\fBbefore-handler\fP  
\fBbegin-handler\fP  
\fBsub-handler\fP   
See all 
\fBdocumentation\fP
